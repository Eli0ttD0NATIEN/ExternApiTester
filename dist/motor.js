"use strict";function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {Promise.resolve(value).then(_next, _throw);}}function _asyncToGenerator(fn) {return function () {var self = this,args = arguments;return new Promise(function (resolve, reject) {var gen = fn.apply(self, args);function _next(value) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);}function _throw(err) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);}_next(undefined);});};}function _createForOfIteratorHelper(o, allowArrayLike) {var it;if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = o[Symbol.iterator]();}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it["return"] != null) it["return"]();} finally {if (didErr) throw err;}} };}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}var FileParser = require('./fileParser');
var SerieParser = require('./serieParser');
var Serie = require('./serieClass');
var path = require('path');
var SingletonFileValidator = require('./singletonFileValidator');
var fs = require('fs');var _require =
require('process'),process = _require.process,exit = _require.exit;
var Spec = Mocha.Spec;
var TeamCity = require('mocha-teamcity-reporter');var _require2 =
require('mocha/mocha'),type = _require2.type;var

Motor = /*#__PURE__*/function () {
  function Motor(config) {var _this = this;_classCallCheck(this, Motor);_defineProperty(this, "getAllStepFiles",











    function (dirPath, arrayOfFiles) {
      var motor = _this;
      var files = fs.readdirSync(dirPath);
      arrayOfFiles = arrayOfFiles || [];
      files.forEach(function (file) {
        if (fs.statSync(dirPath + "/" + file).isDirectory()) {
          arrayOfFiles = motor.getAllStepFiles(dirPath + "/" + file, arrayOfFiles);
        } else {
          if (path.extname(file) == '.json') {
            arrayOfFiles.push(path.join(dirPath, "/", file));
          }
        }
      });
      return arrayOfFiles;
    });_defineProperty(this, "getAllStepData",
    function () {
      var allTestData = [];
      _this.allStepFiles.forEach(function (file) {
        var fileParser = new FileParser(file, _this.config);
        var fileData = fileParser.getData();
        if (!_this.validateStepFile.validFile(fileData)) {
          console.log("Step File " + fileData.groupname + " is not valid ! Bad format");
          exit(1);
        }
        allTestData.push(fileData);
      });
      return allTestData;
    });_defineProperty(this, "getTestFromFileAndId",
    function (filename, id) {var _iterator = _createForOfIteratorHelper(
      _this.allStepFiles),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var file = _step.value;
          if (path.basename(file) == filename) {
            var index = _this.allStepFiles.indexOf(file);
            var fileTest = _this.allTestData[index];var _iterator2 = _createForOfIteratorHelper(
            fileTest.all_test),_step2;try {for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {var caseTest = _step2.value;
                if (caseTest.id == id) {
                  return caseTest;
                }
              }} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}
          }
        }} catch (err) {_iterator.e(err);} finally {_iterator.f();}
    });_defineProperty(this, "createAllSerieSuite",
    function () {
      var allSerieObject = [];
      _this.serieParser.getAllSeries().forEach(function (testSerie) {
        var serie = {
          "name": testSerie.name,
          "description": testSerie.description,
          "serieExecutionOrder": [],
          "automatedAuth": testSerie.automatedAuth,
          "cache": false };

        testSerie.executionOrder.forEach(function (executionStep) {
          var caseTestObj = _this.getTestFromFileAndId(executionStep.file, executionStep.id);
          caseTestObj.requiredStep = executionStep.requiredStep;
          serie.serieExecutionOrder.push(caseTestObj);
          if (executionStep['cache'] != undefined) {
            serie.cache = true;
          }
        });
        allSerieObject.push(serie);
      });
      return allSerieObject;
    });this.config = config;this.config.mochaInstance = new Mocha({ reporter: this.config.report == 'tc' ? TeamCity : Spec });this.serieParser = new SerieParser(this.config).getInstance();this.validateStepFile = new SingletonFileValidator(this.config, 'step').getInstance('step');this.allStepFiles = this.getAllStepFiles(this.config.stepFolder);this.allTestData = this.getAllStepData();this.AllSerieSuite = this.createAllSerieSuite();this.createTestGroup();}_createClass(Motor, [{ key: "createTestGroup", value: function () {var _createTestGroup = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(
      function _callee() {var _iterator3, _step3, serie, serieInstance;return regeneratorRuntime.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:_iterator3 = _createForOfIteratorHelper(
                this.AllSerieSuite);_context.prev = 1;_iterator3.s();case 3:if ((_step3 = _iterator3.n()).done) {_context.next = 10;break;}serie = _step3.value;
                serieInstance = new Serie(serie, this.config);_context.next = 8;return (
                  serieInstance.startAssert());case 8:_context.next = 3;break;case 10:_context.next = 15;break;case 12:_context.prev = 12;_context.t0 = _context["catch"](1);_iterator3.e(_context.t0);case 15:_context.prev = 15;_iterator3.f();return _context.finish(15);case 18:

                this.config.mochaInstance.run();case 19:case "end":return _context.stop();}}}, _callee, this, [[1, 12, 15, 18]]);}));function createTestGroup() {return _createTestGroup.apply(this, arguments);}return createTestGroup;}() }]);return Motor;}();


module.exports = Motor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,