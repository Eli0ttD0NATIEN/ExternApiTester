"use strict";function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}var fs = require('fs');
var Ajv = require("ajv")["default"];
var path = require("path");var

ValidateSerieFile =
function ValidateSerieFile(config) {var _this = this;_classCallCheck(this, ValidateSerieFile);_defineProperty(this, "getPathFile",







  function (filename) {
    return path.resolve(_this.config.testFolder, filename);
  });_defineProperty(this, "validSerieFile",

  function (data) {
    var validate = _this.ajv.compile(_this.schema);
    try {
      return validate(data);
    } catch (err) {
      console.log(validate.errors);
      return false;
    }
  });var _filename = 'validSerieFileSchema.json';this.ajv = new Ajv({ strict: false, allowUnionTypes: true, allErrors: true });this.config = config;this.rawData = fs.readFileSync(this.getPathFile(_filename), { encoding: 'utf-8' });this.schema = JSON.parse(this.rawData);};var


Singleton =
function Singleton(config) {_classCallCheck(this, Singleton);_defineProperty(this, "getInstance",



  function () {
    return Singleton.instance;
  });_defineProperty(this, "destroy",
  function () {
    Singleton.instance = null;
  });if (!Singleton.instance) Singleton.instance = new ValidateSerieFile(config);};

module.exports = Singleton;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy92YWxpZGF0ZVNlcmllRmlsZS5qcyJdLCJuYW1lcyI6WyJmcyIsInJlcXVpcmUiLCJBanYiLCJwYXRoIiwiVmFsaWRhdGVTZXJpZUZpbGUiLCJjb25maWciLCJmaWxlbmFtZSIsInJlc29sdmUiLCJ0ZXN0Rm9sZGVyIiwiZGF0YSIsInZhbGlkYXRlIiwiYWp2IiwiY29tcGlsZSIsInNjaGVtYSIsImVyciIsImNvbnNvbGUiLCJsb2ciLCJlcnJvcnMiLCJzdHJpY3QiLCJhbGxvd1VuaW9uVHlwZXMiLCJhbGxFcnJvcnMiLCJyYXdEYXRhIiwicmVhZEZpbGVTeW5jIiwiZ2V0UGF0aEZpbGUiLCJlbmNvZGluZyIsIkpTT04iLCJwYXJzZSIsIlNpbmdsZXRvbiIsImluc3RhbmNlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IjRXQUFBLElBQU1BLEVBQUUsR0FBSUMsT0FBTyxDQUFDLElBQUQsQ0FBbkI7QUFDQSxJQUFNQyxHQUFHLEdBQUdELE9BQU8sQ0FBQyxLQUFELENBQVAsV0FBWjtBQUNBLElBQU1FLElBQUksR0FBR0YsT0FBTyxDQUFDLE1BQUQsQ0FBcEIsQzs7QUFFTUcsaUI7QUFDRiwyQkFBWUMsTUFBWixFQUFtQjs7Ozs7Ozs7QUFRTCxZQUFDQyxRQUFELEVBQWU7QUFDekIsV0FBT0gsSUFBSSxDQUFDSSxPQUFMLENBQWEsS0FBSSxDQUFDRixNQUFMLENBQVlHLFVBQXpCLEVBQXFDRixRQUFyQyxDQUFQO0FBQ0gsR0FWa0I7O0FBWUYsWUFBQ0csSUFBRCxFQUFVO0FBQ3ZCLFFBQU1DLFFBQVEsR0FBRyxLQUFJLENBQUNDLEdBQUwsQ0FBU0MsT0FBVCxDQUFpQixLQUFJLENBQUNDLE1BQXRCLENBQWpCO0FBQ0EsUUFBRztBQUNDLGFBQU9ILFFBQVEsQ0FBQ0QsSUFBRCxDQUFmO0FBQ0gsS0FGRCxDQUVDLE9BQU1LLEdBQU4sRUFBVTtBQUNQQyxNQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWU4sUUFBUSxDQUFDTyxNQUFyQjtBQUNBLGFBQU8sS0FBUDtBQUNIO0FBQ0osR0FwQmtCLEVBQ2YsSUFBTVgsU0FBUSxHQUFHLDJCQUFqQixDQUNBLEtBQUtLLEdBQUwsR0FBVyxJQUFJVCxHQUFKLENBQVEsRUFBQ2dCLE1BQU0sRUFBRSxLQUFULEVBQWdCQyxlQUFlLEVBQUUsSUFBakMsRUFBdUNDLFNBQVMsRUFBRSxJQUFsRCxFQUFSLENBQVgsQ0FDQSxLQUFLZixNQUFMLEdBQWNBLE1BQWQsQ0FDQSxLQUFLZ0IsT0FBTCxHQUFlckIsRUFBRSxDQUFDc0IsWUFBSCxDQUFnQixLQUFLQyxXQUFMLENBQWlCakIsU0FBakIsQ0FBaEIsRUFBNEMsRUFBQ2tCLFFBQVEsRUFBRSxPQUFYLEVBQTVDLENBQWYsQ0FDQSxLQUFLWCxNQUFMLEdBQWNZLElBQUksQ0FBQ0MsS0FBTCxDQUFXLEtBQUtMLE9BQWhCLENBQWQsQ0FDSCxDOzs7QUFpQkNNLFM7QUFDRixtQkFBWXRCLE1BQVosRUFBbUI7Ozs7QUFJTCxjQUFNO0FBQ2hCLFdBQU9zQixTQUFTLENBQUNDLFFBQWpCO0FBQ0gsR0FOa0I7QUFPVCxjQUFNO0FBQ1pELElBQUFBLFNBQVMsQ0FBQ0MsUUFBVixHQUFxQixJQUFyQjtBQUNILEdBVGtCLEVBQ2YsSUFBRyxDQUFDRCxTQUFTLENBQUNDLFFBQWQsRUFDSUQsU0FBUyxDQUFDQyxRQUFWLEdBQXFCLElBQUl4QixpQkFBSixDQUFzQkMsTUFBdEIsQ0FBckIsQ0FDUCxDOztBQVFMd0IsTUFBTSxDQUFDQyxPQUFQLEdBQWlCSCxTQUFqQiIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGZzID0gIHJlcXVpcmUoJ2ZzJyk7XHJcbmNvbnN0IEFqdiA9IHJlcXVpcmUoXCJhanZcIikuZGVmYXVsdFxyXG5jb25zdCBwYXRoID0gcmVxdWlyZShcInBhdGhcIik7XHJcblxyXG5jbGFzcyBWYWxpZGF0ZVNlcmllRmlsZXtcclxuICAgIGNvbnN0cnVjdG9yKGNvbmZpZyl7XHJcbiAgICAgICAgY29uc3QgZmlsZW5hbWUgPSAndmFsaWRTZXJpZUZpbGVTY2hlbWEuanNvbidcclxuICAgICAgICB0aGlzLmFqdiA9IG5ldyBBanYoe3N0cmljdDogZmFsc2UsIGFsbG93VW5pb25UeXBlczogdHJ1ZSwgYWxsRXJyb3JzOiB0cnVlfSk7XHJcbiAgICAgICAgdGhpcy5jb25maWcgPSBjb25maWc7XHJcbiAgICAgICAgdGhpcy5yYXdEYXRhID0gZnMucmVhZEZpbGVTeW5jKHRoaXMuZ2V0UGF0aEZpbGUoZmlsZW5hbWUpLCB7ZW5jb2Rpbmc6ICd1dGYtOCd9KTtcclxuICAgICAgICB0aGlzLnNjaGVtYSA9IEpTT04ucGFyc2UodGhpcy5yYXdEYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRQYXRoRmlsZSA9IChmaWxlbmFtZSkgPT4gIHtcclxuICAgICAgICByZXR1cm4gcGF0aC5yZXNvbHZlKHRoaXMuY29uZmlnLnRlc3RGb2xkZXIsIGZpbGVuYW1lKTtcclxuICAgIH1cclxuXHJcbiAgICB2YWxpZFNlcmllRmlsZSA9IChkYXRhKSA9PiB7XHJcbiAgICAgICAgY29uc3QgdmFsaWRhdGUgPSB0aGlzLmFqdi5jb21waWxlKHRoaXMuc2NoZW1hKTtcclxuICAgICAgICB0cnl7XHJcbiAgICAgICAgICAgIHJldHVybiB2YWxpZGF0ZShkYXRhKTtcclxuICAgICAgICB9Y2F0Y2goZXJyKXtcclxuICAgICAgICAgICAgY29uc29sZS5sb2codmFsaWRhdGUuZXJyb3JzKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuY2xhc3MgU2luZ2xldG9ue1xyXG4gICAgY29uc3RydWN0b3IoY29uZmlnKXtcclxuICAgICAgICBpZighU2luZ2xldG9uLmluc3RhbmNlKVxyXG4gICAgICAgICAgICBTaW5nbGV0b24uaW5zdGFuY2UgPSBuZXcgVmFsaWRhdGVTZXJpZUZpbGUoY29uZmlnKTtcclxuICAgIH1cclxuICAgIGdldEluc3RhbmNlID0gKCkgPT4ge1xyXG4gICAgICAgIHJldHVybiBTaW5nbGV0b24uaW5zdGFuY2U7XHJcbiAgICB9XHJcbiAgICBkZXN0cm95ID0gKCkgPT4ge1xyXG4gICAgICAgIFNpbmdsZXRvbi5pbnN0YW5jZSA9IG51bGw7XHJcbiAgICB9XHJcbn1cclxubW9kdWxlLmV4cG9ydHMgPSBTaW5nbGV0b247Il19