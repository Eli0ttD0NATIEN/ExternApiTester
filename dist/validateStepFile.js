"use strict";function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}var fs = require('fs');
var Ajv = require("ajv")["default"];
var path = require("path");var

ValidateStepFile =
function ValidateStepFile(config) {var _this = this;_classCallCheck(this, ValidateStepFile);_defineProperty(this, "getPathFile",






  function (filename) {
    return path.resolve(_this.config.testFolder, filename);
  });_defineProperty(this, "validStepFile",
  function (data) {
    var validate = _this.ajv.compile(_this.schema);
    try {
      return validate(data);
    } catch (err) {
      console.log(validate.errors);
      return false;
    }
  });var _filename = "validStepFileSchema.json";this.ajv = new Ajv({ strict: false, allowUnionTypes: true, allErrors: true });this.config = config;this.rawData = fs.readFileSync(this.getPathFile(_filename), { encoding: 'utf-8' });this.schema = JSON.parse(this.rawData);};var


Singleton =
function Singleton(config) {_classCallCheck(this, Singleton);_defineProperty(this, "getInstance",




  function () {
    return Singleton.instance;
  });if (!Singleton.instance) {Singleton.instance = new ValidateStepFile(config);}};

module.exports = Singleton;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy92YWxpZGF0ZVN0ZXBGaWxlLmpzIl0sIm5hbWVzIjpbImZzIiwicmVxdWlyZSIsIkFqdiIsInBhdGgiLCJWYWxpZGF0ZVN0ZXBGaWxlIiwiY29uZmlnIiwiZmlsZW5hbWUiLCJyZXNvbHZlIiwidGVzdEZvbGRlciIsImRhdGEiLCJ2YWxpZGF0ZSIsImFqdiIsImNvbXBpbGUiLCJzY2hlbWEiLCJlcnIiLCJjb25zb2xlIiwibG9nIiwiZXJyb3JzIiwic3RyaWN0IiwiYWxsb3dVbmlvblR5cGVzIiwiYWxsRXJyb3JzIiwicmF3RGF0YSIsInJlYWRGaWxlU3luYyIsImdldFBhdGhGaWxlIiwiZW5jb2RpbmciLCJKU09OIiwicGFyc2UiLCJTaW5nbGV0b24iLCJpbnN0YW5jZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI0V0FBQSxJQUFNQSxFQUFFLEdBQUlDLE9BQU8sQ0FBQyxJQUFELENBQW5CO0FBQ0EsSUFBTUMsR0FBRyxHQUFHRCxPQUFPLENBQUMsS0FBRCxDQUFQLFdBQVo7QUFDQSxJQUFNRSxJQUFJLEdBQUdGLE9BQU8sQ0FBQyxNQUFELENBQXBCLEM7O0FBRU1HLGdCO0FBQ0YsMEJBQVlDLE1BQVosRUFBbUI7Ozs7Ozs7QUFPTCxZQUFDQyxRQUFELEVBQWU7QUFDekIsV0FBT0gsSUFBSSxDQUFDSSxPQUFMLENBQWEsS0FBSSxDQUFDRixNQUFMLENBQVlHLFVBQXpCLEVBQXFDRixRQUFyQyxDQUFQO0FBQ0gsR0FUa0I7QUFVSCxZQUFDRyxJQUFELEVBQVU7QUFDdEIsUUFBTUMsUUFBUSxHQUFHLEtBQUksQ0FBQ0MsR0FBTCxDQUFTQyxPQUFULENBQWlCLEtBQUksQ0FBQ0MsTUFBdEIsQ0FBakI7QUFDQSxRQUFHO0FBQ0MsYUFBT0gsUUFBUSxDQUFDRCxJQUFELENBQWY7QUFDSCxLQUZELENBRUMsT0FBTUssR0FBTixFQUFVO0FBQ1BDLE1BQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZTixRQUFRLENBQUNPLE1BQXJCO0FBQ0EsYUFBTyxLQUFQO0FBQ0g7QUFDSixHQWxCa0IsRUFDZixJQUFJWCxTQUFRLEdBQUcsMEJBQWYsQ0FDQSxLQUFLSyxHQUFMLEdBQVcsSUFBSVQsR0FBSixDQUFRLEVBQUNnQixNQUFNLEVBQUUsS0FBVCxFQUFnQkMsZUFBZSxFQUFFLElBQWpDLEVBQXVDQyxTQUFTLEVBQUUsSUFBbEQsRUFBUixDQUFYLENBQ0EsS0FBS2YsTUFBTCxHQUFjQSxNQUFkLENBQ0EsS0FBS2dCLE9BQUwsR0FBZXJCLEVBQUUsQ0FBQ3NCLFlBQUgsQ0FBZ0IsS0FBS0MsV0FBTCxDQUFpQmpCLFNBQWpCLENBQWhCLEVBQTRDLEVBQUNrQixRQUFRLEVBQUUsT0FBWCxFQUE1QyxDQUFmLENBQ0EsS0FBS1gsTUFBTCxHQUFjWSxJQUFJLENBQUNDLEtBQUwsQ0FBVyxLQUFLTCxPQUFoQixDQUFkLENBQ0gsQzs7O0FBZUNNLFM7QUFDRixtQkFBWXRCLE1BQVosRUFBbUI7Ozs7O0FBS0wsY0FBTTtBQUNoQixXQUFPc0IsU0FBUyxDQUFDQyxRQUFqQjtBQUNILEdBUGtCLEVBQ2YsSUFBRyxDQUFDRCxTQUFTLENBQUNDLFFBQWQsRUFBdUIsQ0FDbkJELFNBQVMsQ0FBQ0MsUUFBVixHQUFxQixJQUFJeEIsZ0JBQUosQ0FBcUJDLE1BQXJCLENBQXJCLENBQ0gsQ0FDSixDOztBQUtMd0IsTUFBTSxDQUFDQyxPQUFQLEdBQWlCSCxTQUFqQiIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGZzID0gIHJlcXVpcmUoJ2ZzJyk7XHJcbmNvbnN0IEFqdiA9IHJlcXVpcmUoXCJhanZcIikuZGVmYXVsdFxyXG5jb25zdCBwYXRoID0gcmVxdWlyZShcInBhdGhcIik7XHJcblxyXG5jbGFzcyBWYWxpZGF0ZVN0ZXBGaWxle1xyXG4gICAgY29uc3RydWN0b3IoY29uZmlnKXtcclxuICAgICAgICBsZXQgZmlsZW5hbWUgPSBcInZhbGlkU3RlcEZpbGVTY2hlbWEuanNvblwiXHJcbiAgICAgICAgdGhpcy5hanYgPSBuZXcgQWp2KHtzdHJpY3Q6IGZhbHNlLCBhbGxvd1VuaW9uVHlwZXM6IHRydWUsIGFsbEVycm9yczogdHJ1ZX0pO1xyXG4gICAgICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xyXG4gICAgICAgIHRoaXMucmF3RGF0YSA9IGZzLnJlYWRGaWxlU3luYyh0aGlzLmdldFBhdGhGaWxlKGZpbGVuYW1lKSwge2VuY29kaW5nOiAndXRmLTgnfSlcclxuICAgICAgICB0aGlzLnNjaGVtYSA9IEpTT04ucGFyc2UodGhpcy5yYXdEYXRhKVxyXG4gICAgfVxyXG4gICAgZ2V0UGF0aEZpbGUgPSAoZmlsZW5hbWUpID0+ICB7XHJcbiAgICAgICAgcmV0dXJuIHBhdGgucmVzb2x2ZSh0aGlzLmNvbmZpZy50ZXN0Rm9sZGVyLCBmaWxlbmFtZSk7XHJcbiAgICB9XHJcbiAgICB2YWxpZFN0ZXBGaWxlID0gKGRhdGEpID0+IHtcclxuICAgICAgICBjb25zdCB2YWxpZGF0ZSA9IHRoaXMuYWp2LmNvbXBpbGUodGhpcy5zY2hlbWEpO1xyXG4gICAgICAgIHRyeXtcclxuICAgICAgICAgICAgcmV0dXJuIHZhbGlkYXRlKGRhdGEpO1xyXG4gICAgICAgIH1jYXRjaChlcnIpe1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyh2YWxpZGF0ZS5lcnJvcnMpO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5jbGFzcyBTaW5nbGV0b257XHJcbiAgICBjb25zdHJ1Y3Rvcihjb25maWcpe1xyXG4gICAgICAgIGlmKCFTaW5nbGV0b24uaW5zdGFuY2Upe1xyXG4gICAgICAgICAgICBTaW5nbGV0b24uaW5zdGFuY2UgPSBuZXcgVmFsaWRhdGVTdGVwRmlsZShjb25maWcpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGdldEluc3RhbmNlID0gKCkgPT4ge1xyXG4gICAgICAgIHJldHVybiBTaW5nbGV0b24uaW5zdGFuY2U7XHJcbiAgICB9XHJcbn1cclxubW9kdWxlLmV4cG9ydHMgPSBTaW5nbGV0b247Il19